Q-1 REVERSE A LINKED LIST
ANS-
   ListNode* reverseList(ListNode* head) {
        ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* forward;
        while(curr!=NULL)
        {
            forward = curr->next;
            curr->next = prev;
            prev = curr;
            curr = forward;
        }
        return prev;
        
    }


Q-2 MIDDLE ELEMENT OF THE LINKED LIST
  ANS-
  class Solution {
public:
    int getLength(ListNode* head)
    {
        int ans = 0;
        while(head!=NULL)
        {
            ans++;
            head = head->next;
        }
        return ans;
    }
    
    ListNode* middleNode(ListNode* head) {
        int len = getLength(head);
        int mid = len/2;
        int cnt = 0;
        ListNode* temp = head;
        while(cnt<mid)
        {
            temp = temp->next;
            cnt++;
        }
        return temp;   
    }
};

Q-3 MERGE TWO SORTED LINKED LIST
  ANS-
  ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1 == NULL)
        return list2;

        if(list2 == NULL)
        return list1;

        if(list1->val <= list2->val)
        {
            list1->next = mergeTwoLists(list1->next , list2);
            return list1;
        }
        else
        {
            list2->next = mergeTwoLists(list1,list2->next);
            return list2;
        }
    }

Q-4
  ADD TWO NUMBERS AS LINKED LIST
  ANS-
  void insertAtTail(ListNode* &head, ListNode* &tail , int value)
    {
      ListNode* temp = new ListNode(value);
      if(head == NULL)
      {
      head = temp;
      tail = temp;
      return;
      }
      else
      {
          tail->next = temp;
          tail = temp;
      }
    }

    ListNode* reverse(ListNode* head)
    {
        ListNode* curr= head;
        ListNode* prev = NULL;
        ListNode* next = NULL;
        while(curr!=NULL)
        {
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr=next;
        }
        return prev;
    }
    ListNode* add(ListNode* first, ListNode* second)
    {
       int carry = 0;
       ListNode* ansHead = NULL;
       ListNode* ansTail = NULL;
       while(first!=NULL && second!= NULL)
       {
           int sum = carry + first->val + second->val;
           int digit = sum%10;
           
           insertAtTail(ansHead,ansTail,digit);
           carry = sum/10;
           first = first->next;
           second = second->next;
       } 
       while(first!=NULL)
       {
           int sum = carry + first->val;
           int digit = sum%10;
           
           insertAtTail(ansHead,ansTail,digit);
           carry = sum/10;
           first = first->next;
       }
       while(second!=NULL)
       {
           int sum = carry + second->val;
           int digit = sum%10;
           
           insertAtTail(ansHead,ansTail,digit);
           carry = sum/10;
           second = second->next;
       }
       while(carry!=0)
       {
           int sum = carry;
           int digit = sum%10;
           
           insertAtTail(ansHead,ansTail,digit);
           carry = sum/10;

       }
       return ansHead;
    }
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        //Step1 -Reverse both the lists
        

        //step2 -add both the lists
        ListNode* ans = add(l1,l2);
          
        //reverse the ans list
        

        return ans;
    }

Q-5 MERGE TWO SORTED LINKED LIST
  ANS-
  ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1 == NULL)
        return list2;

        if(list2 == NULL)
        return list1;

        if(list1->val <= list2->val)
        {
            list1->next = mergeTwoLists(list1->next , list2);
            return list1;
        }
        else
        {
            list2->next = mergeTwoLists(list1,list2->next);
            return list2;
        }
    }
