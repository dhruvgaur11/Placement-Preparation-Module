Q-1 SET MATRIX TO ZEROS
ANS-
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int r=matrix.size();
        int c=matrix[0].size();
          set<int>row;
          set<int>col;
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(matrix[i][j]==0)
                {
                   row.insert(i);
                   col.insert(j);
                }
            }
        }

        for(int i = 0 ; i < r ; i++)
        {
            for(int j = 0 ; j < c ; j++)
            {
                if(row.count(i) > 0 || col.count(j) > 0)
                {
                    matrix[i][j] = 0;
                }
            }
        }
    }
};


Q-2 PASCAL' TRIANGLE
ANS-
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>>result;
        for(int row=1;row<=numRows;row++){
            vector<int>temp;
            long long ans=1;
            temp.push_back(ans);
            for(int col=1;col<row;col++){
                ans=ans*(row-col);
                ans=ans/col;
                temp.push_back(ans);
            }
            result.push_back(temp);    
        }
        return result;
    }
};

Q-3 SORT 0,1,2
ANS-void sort012(int *arr, int n)
{
   //   Write your code here
    int c0=0,c1=0,c2=0;
    for(int i =0; i<n;i++)
    {
        if(arr[i]==0)
            c0++;
        else if(arr[i]==1)
            c1++;
        else
            c2++;
    }
    
   int k=0;
    while(c0!=0)
    {
        arr[k++]=0;
        c0--;
    }
    while(c1!=0)
    {
        arr[k++]=1;
        c1--;
    }
    while(c2!=0)
    {
        arr[k++]=2;
        c2--;
    }
}

Q-4 STOCKS BUY AND SELL
ANS-class Solution {
public:
    int maxProfit(vector<int>& prices) {

        if(prices.size()==1)
        return 0;

        int low=0;
        int maxProfit=0;

        for(int i=0;i<prices.size();i++)
        {
            if(prices[i]<prices[low])
            {
                low=i;
                continue;
            }
            maxProfit=max(maxProfit,prices[i]-prices[low]);
        }
        return maxProfit;

        
    }
};
